//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class AudioMatcher {

    static Entitas.IMatcher<AudioEntity> _matcherProcessed;

    public static Entitas.IMatcher<AudioEntity> Processed {
        get {
            if (_matcherProcessed == null) {
                var matcher = (Entitas.Matcher<AudioEntity>)Entitas.Matcher<AudioEntity>.AllOf(AudioComponentsLookup.Processed);
                matcher.componentNames = AudioComponentsLookup.componentNames;
                _matcherProcessed = matcher;
            }

            return _matcherProcessed;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class AudioEntity {

    static readonly Code.Audios.Audio.Processed processedComponent = new Code.Audios.Audio.Processed();

    public bool isProcessed {
        get { return HasComponent(AudioComponentsLookup.Processed); }
        set {
            if (value != isProcessed) {
                var index = AudioComponentsLookup.Processed;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : processedComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}
