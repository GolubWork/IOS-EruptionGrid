//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class AudioMatcher {

    static Entitas.IMatcher<AudioEntity> _matcherMusic;

    public static Entitas.IMatcher<AudioEntity> Music {
        get {
            if (_matcherMusic == null) {
                var matcher = (Entitas.Matcher<AudioEntity>)Entitas.Matcher<AudioEntity>.AllOf(AudioComponentsLookup.Music);
                matcher.componentNames = AudioComponentsLookup.componentNames;
                _matcherMusic = matcher;
            }

            return _matcherMusic;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class AudioEntity {

    public Code.Audios.Audio.MusicComponent music { get { return (Code.Audios.Audio.MusicComponent)GetComponent(AudioComponentsLookup.Music); } }
    public Code.Audios.Audio.MusicTypeId Music { get { return music.Value; } }
    public bool hasMusic { get { return HasComponent(AudioComponentsLookup.Music); } }

    public AudioEntity AddMusic(Code.Audios.Audio.MusicTypeId newValue) {
        var index = AudioComponentsLookup.Music;
        var component = (Code.Audios.Audio.MusicComponent)CreateComponent(index, typeof(Code.Audios.Audio.MusicComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public AudioEntity ReplaceMusic(Code.Audios.Audio.MusicTypeId newValue) {
        var index = AudioComponentsLookup.Music;
        var component = (Code.Audios.Audio.MusicComponent)CreateComponent(index, typeof(Code.Audios.Audio.MusicComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public AudioEntity RemoveMusic() {
        RemoveComponent(AudioComponentsLookup.Music);
        return this;
    }
}
