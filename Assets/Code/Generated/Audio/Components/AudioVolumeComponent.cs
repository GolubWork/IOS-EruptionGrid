//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class AudioMatcher {

    static Entitas.IMatcher<AudioEntity> _matcherVolume;

    public static Entitas.IMatcher<AudioEntity> Volume {
        get {
            if (_matcherVolume == null) {
                var matcher = (Entitas.Matcher<AudioEntity>)Entitas.Matcher<AudioEntity>.AllOf(AudioComponentsLookup.Volume);
                matcher.componentNames = AudioComponentsLookup.componentNames;
                _matcherVolume = matcher;
            }

            return _matcherVolume;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class AudioEntity {

    public Code.Audios.Audio.Volume volume { get { return (Code.Audios.Audio.Volume)GetComponent(AudioComponentsLookup.Volume); } }
    public float Volume { get { return volume.Value; } }
    public bool hasVolume { get { return HasComponent(AudioComponentsLookup.Volume); } }

    public AudioEntity AddVolume(float newValue) {
        var index = AudioComponentsLookup.Volume;
        var component = (Code.Audios.Audio.Volume)CreateComponent(index, typeof(Code.Audios.Audio.Volume));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public AudioEntity ReplaceVolume(float newValue) {
        var index = AudioComponentsLookup.Volume;
        var component = (Code.Audios.Audio.Volume)CreateComponent(index, typeof(Code.Audios.Audio.Volume));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public AudioEntity RemoveVolume() {
        RemoveComponent(AudioComponentsLookup.Volume);
        return this;
    }
}
