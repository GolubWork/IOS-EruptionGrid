//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherTouchPhase;

    public static Entitas.IMatcher<InputEntity> TouchPhase {
        get {
            if (_matcherTouchPhase == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.TouchPhase);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherTouchPhase = matcher;
            }

            return _matcherTouchPhase;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public Code.Input.TouchPhaseComponent touchPhase { get { return (Code.Input.TouchPhaseComponent)GetComponent(InputComponentsLookup.TouchPhase); } }
    public UnityEngine.TouchPhase TouchPhase { get { return touchPhase.Value; } }
    public bool hasTouchPhase { get { return HasComponent(InputComponentsLookup.TouchPhase); } }

    public InputEntity AddTouchPhase(UnityEngine.TouchPhase newValue) {
        var index = InputComponentsLookup.TouchPhase;
        var component = (Code.Input.TouchPhaseComponent)CreateComponent(index, typeof(Code.Input.TouchPhaseComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public InputEntity ReplaceTouchPhase(UnityEngine.TouchPhase newValue) {
        var index = InputComponentsLookup.TouchPhase;
        var component = (Code.Input.TouchPhaseComponent)CreateComponent(index, typeof(Code.Input.TouchPhaseComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public InputEntity RemoveTouchPhase() {
        RemoveComponent(InputComponentsLookup.TouchPhase);
        return this;
    }
}
