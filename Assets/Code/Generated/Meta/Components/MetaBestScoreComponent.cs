//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MetaMatcher {

    static Entitas.IMatcher<MetaEntity> _matcherBestScore;

    public static Entitas.IMatcher<MetaEntity> BestScore {
        get {
            if (_matcherBestScore == null) {
                var matcher = (Entitas.Matcher<MetaEntity>)Entitas.Matcher<MetaEntity>.AllOf(MetaComponentsLookup.BestScore);
                matcher.componentNames = MetaComponentsLookup.componentNames;
                _matcherBestScore = matcher;
            }

            return _matcherBestScore;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity {

    public Code.Gameplay.Score.BestScore bestScore { get { return (Code.Gameplay.Score.BestScore)GetComponent(MetaComponentsLookup.BestScore); } }
    public float BestScore { get { return bestScore.Value; } }
    public bool hasBestScore { get { return HasComponent(MetaComponentsLookup.BestScore); } }

    public MetaEntity AddBestScore(float newValue) {
        var index = MetaComponentsLookup.BestScore;
        var component = (Code.Gameplay.Score.BestScore)CreateComponent(index, typeof(Code.Gameplay.Score.BestScore));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public MetaEntity ReplaceBestScore(float newValue) {
        var index = MetaComponentsLookup.BestScore;
        var component = (Code.Gameplay.Score.BestScore)CreateComponent(index, typeof(Code.Gameplay.Score.BestScore));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public MetaEntity RemoveBestScore() {
        RemoveComponent(MetaComponentsLookup.BestScore);
        return this;
    }
}
