//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherZoneTypeId;

    public static Entitas.IMatcher<GameEntity> ZoneTypeId {
        get {
            if (_matcherZoneTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ZoneTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherZoneTypeId = matcher;
            }

            return _matcherZoneTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Zones.ZoneTypeIdComponent zoneTypeId { get { return (Code.Gameplay.Zones.ZoneTypeIdComponent)GetComponent(GameComponentsLookup.ZoneTypeId); } }
    public Code.Gameplay.Zones.Configs.ZoneTypeId ZoneTypeId { get { return zoneTypeId.Value; } }
    public bool hasZoneTypeId { get { return HasComponent(GameComponentsLookup.ZoneTypeId); } }

    public GameEntity AddZoneTypeId(Code.Gameplay.Zones.Configs.ZoneTypeId newValue) {
        var index = GameComponentsLookup.ZoneTypeId;
        var component = (Code.Gameplay.Zones.ZoneTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Zones.ZoneTypeIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceZoneTypeId(Code.Gameplay.Zones.Configs.ZoneTypeId newValue) {
        var index = GameComponentsLookup.ZoneTypeId;
        var component = (Code.Gameplay.Zones.ZoneTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Zones.ZoneTypeIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveZoneTypeId() {
        RemoveComponent(GameComponentsLookup.ZoneTypeId);
        return this;
    }
}
