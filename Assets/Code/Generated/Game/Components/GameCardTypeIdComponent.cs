//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCardTypeId;

    public static Entitas.IMatcher<GameEntity> CardTypeId {
        get {
            if (_matcherCardTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CardTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCardTypeId = matcher;
            }

            return _matcherCardTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Cards.CardTypeIdComponent cardTypeId { get { return (Code.Gameplay.Cards.CardTypeIdComponent)GetComponent(GameComponentsLookup.CardTypeId); } }
    public Code.Gameplay.Cards.Configs.CardTypeId CardTypeId { get { return cardTypeId.Value; } }
    public bool hasCardTypeId { get { return HasComponent(GameComponentsLookup.CardTypeId); } }

    public GameEntity AddCardTypeId(Code.Gameplay.Cards.Configs.CardTypeId newValue) {
        var index = GameComponentsLookup.CardTypeId;
        var component = (Code.Gameplay.Cards.CardTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Cards.CardTypeIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCardTypeId(Code.Gameplay.Cards.Configs.CardTypeId newValue) {
        var index = GameComponentsLookup.CardTypeId;
        var component = (Code.Gameplay.Cards.CardTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Cards.CardTypeIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCardTypeId() {
        RemoveComponent(GameComponentsLookup.CardTypeId);
        return this;
    }
}
