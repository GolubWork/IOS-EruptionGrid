//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLinkedGridId;

    public static Entitas.IMatcher<GameEntity> LinkedGridId {
        get {
            if (_matcherLinkedGridId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LinkedGridId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLinkedGridId = matcher;
            }

            return _matcherLinkedGridId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Grids.LinkedGridId linkedGridId { get { return (Code.Gameplay.Grids.LinkedGridId)GetComponent(GameComponentsLookup.LinkedGridId); } }
    public int LinkedGridId { get { return linkedGridId.Value; } }
    public bool hasLinkedGridId { get { return HasComponent(GameComponentsLookup.LinkedGridId); } }

    public GameEntity AddLinkedGridId(int newValue) {
        var index = GameComponentsLookup.LinkedGridId;
        var component = (Code.Gameplay.Grids.LinkedGridId)CreateComponent(index, typeof(Code.Gameplay.Grids.LinkedGridId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceLinkedGridId(int newValue) {
        var index = GameComponentsLookup.LinkedGridId;
        var component = (Code.Gameplay.Grids.LinkedGridId)CreateComponent(index, typeof(Code.Gameplay.Grids.LinkedGridId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveLinkedGridId() {
        RemoveComponent(GameComponentsLookup.LinkedGridId);
        return this;
    }
}
