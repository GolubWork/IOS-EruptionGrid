//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLinkedCellId;

    public static Entitas.IMatcher<GameEntity> LinkedCellId {
        get {
            if (_matcherLinkedCellId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LinkedCellId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLinkedCellId = matcher;
            }

            return _matcherLinkedCellId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.GridCells.LinkedCellId linkedCellId { get { return (Code.Gameplay.GridCells.LinkedCellId)GetComponent(GameComponentsLookup.LinkedCellId); } }
    public int LinkedCellId { get { return linkedCellId.Value; } }
    public bool hasLinkedCellId { get { return HasComponent(GameComponentsLookup.LinkedCellId); } }

    public GameEntity AddLinkedCellId(int newValue) {
        var index = GameComponentsLookup.LinkedCellId;
        var component = (Code.Gameplay.GridCells.LinkedCellId)CreateComponent(index, typeof(Code.Gameplay.GridCells.LinkedCellId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceLinkedCellId(int newValue) {
        var index = GameComponentsLookup.LinkedCellId;
        var component = (Code.Gameplay.GridCells.LinkedCellId)CreateComponent(index, typeof(Code.Gameplay.GridCells.LinkedCellId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveLinkedCellId() {
        RemoveComponent(GameComponentsLookup.LinkedCellId);
        return this;
    }
}
