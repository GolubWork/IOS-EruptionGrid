//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTapRapeatableTimes;

    public static Entitas.IMatcher<GameEntity> TapRapeatableTimes {
        get {
            if (_matcherTapRapeatableTimes == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.TapRapeatableTimes);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTapRapeatableTimes = matcher;
            }

            return _matcherTapRapeatableTimes;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Taps.TapRapeatableTimes tapRapeatableTimes { get { return (Code.Gameplay.Taps.TapRapeatableTimes)GetComponent(GameComponentsLookup.TapRapeatableTimes); } }
    public int TapRapeatableTimes { get { return tapRapeatableTimes.Value; } }
    public bool hasTapRapeatableTimes { get { return HasComponent(GameComponentsLookup.TapRapeatableTimes); } }

    public GameEntity AddTapRapeatableTimes(int newValue) {
        var index = GameComponentsLookup.TapRapeatableTimes;
        var component = (Code.Gameplay.Taps.TapRapeatableTimes)CreateComponent(index, typeof(Code.Gameplay.Taps.TapRapeatableTimes));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTapRapeatableTimes(int newValue) {
        var index = GameComponentsLookup.TapRapeatableTimes;
        var component = (Code.Gameplay.Taps.TapRapeatableTimes)CreateComponent(index, typeof(Code.Gameplay.Taps.TapRapeatableTimes));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTapRapeatableTimes() {
        RemoveComponent(GameComponentsLookup.TapRapeatableTimes);
        return this;
    }
}
