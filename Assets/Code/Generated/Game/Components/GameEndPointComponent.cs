//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEndPoint;

    public static Entitas.IMatcher<GameEntity> EndPoint {
        get {
            if (_matcherEndPoint == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EndPoint);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEndPoint = matcher;
            }

            return _matcherEndPoint;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.ConveyourBeltItem.EndPoint endPoint { get { return (Code.ConveyourBeltItem.EndPoint)GetComponent(GameComponentsLookup.EndPoint); } }
    public int EndPoint { get { return endPoint.Value; } }
    public bool hasEndPoint { get { return HasComponent(GameComponentsLookup.EndPoint); } }

    public GameEntity AddEndPoint(int newValue) {
        var index = GameComponentsLookup.EndPoint;
        var component = (Code.ConveyourBeltItem.EndPoint)CreateComponent(index, typeof(Code.ConveyourBeltItem.EndPoint));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceEndPoint(int newValue) {
        var index = GameComponentsLookup.EndPoint;
        var component = (Code.ConveyourBeltItem.EndPoint)CreateComponent(index, typeof(Code.ConveyourBeltItem.EndPoint));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveEndPoint() {
        RemoveComponent(GameComponentsLookup.EndPoint);
        return this;
    }
}
